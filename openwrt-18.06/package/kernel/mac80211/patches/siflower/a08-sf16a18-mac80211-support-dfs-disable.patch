Index: backports-4.19.7-1/include/net/cfg80211.h
===================================================================
--- backports-4.19.7-1.orig/include/net/cfg80211.h	2020-12-14 10:47:59.499272617 +0800
+++ backports-4.19.7-1/include/net/cfg80211.h	2020-12-14 10:51:08.891280565 +0800
@@ -114,6 +114,7 @@
 	IEEE80211_CHAN_IR_CONCURRENT	= 1<<10,
 	IEEE80211_CHAN_NO_20MHZ		= 1<<11,
 	IEEE80211_CHAN_NO_10MHZ		= 1<<12,
+    IEEE80211_CHAN_RADAR_BACKUP = 1<<13,
 };
 
 #define IEEE80211_CHAN_NO_HT40 \
Index: backports-4.19.7-1/net/wireless/nl80211.c
===================================================================
--- backports-4.19.7-1.orig/net/wireless/nl80211.c	2020-12-14 10:47:59.515272617 +0800
+++ backports-4.19.7-1/net/wireless/nl80211.c	2020-12-14 11:10:30.735329322 +0800
@@ -5991,12 +5991,44 @@
 	return err;
 }
 
+/* to disable radar detection we can clean radar flags in channel_def. */
+static void reg_set_channel_no_dfs(bool rd_disabled)
+{
+	struct cfg80211_registered_device *rdev;
+	struct wiphy *wiphy;
+	enum nl80211_band band;
+	struct ieee80211_supported_band *sband;
+	unsigned int i;
+	struct ieee80211_channel *chan;
+
+	list_for_each_entry(rdev, &cfg80211_rdev_list, list) {
+		wiphy = &rdev->wiphy;
+		for (band = 0; band < NUM_NL80211_BANDS; band++)
+		{
+			sband = wiphy->bands[band];
+			if (!sband)
+			      continue;
+			for (i = 0; i < sband->n_channels; i++)
+			{
+				chan = &sband->channels[i];
+				/* IEEE80211_CHAN_RADAR is 1<<3 */
+				if (rd_disabled)
+				      chan->flags &= ~IEEE80211_CHAN_RADAR;
+				else if (chan->flags & IEEE80211_CHAN_RADAR_BACKUP)
+				      chan->flags |= IEEE80211_CHAN_RADAR;
+			}
+		}
+	}
+}
+
 static int nl80211_req_set_reg(struct sk_buff *skb, struct genl_info *info)
 {
 	char *data = NULL;
 	bool is_indoor;
 	enum nl80211_user_reg_hint_type user_reg_hint_type;
 	u32 owner_nlportid;
+    int err;
+    bool rd_disabled = false;
 
 	/*
 	 * You should only get this when cfg80211 hasn't yet initialized
@@ -6013,6 +6045,9 @@
 	else
 		user_reg_hint_type = NL80211_USER_REG_HINT_USER;
 
+    if (info->attrs[NL80211_ATTR_DFS_CAC_TIME])
+        rd_disabled = true;
+
 	switch (user_reg_hint_type) {
 	case NL80211_USER_REG_HINT_USER:
 	case NL80211_USER_REG_HINT_CELL_BASE:
@@ -6020,7 +6055,9 @@
 			return -EINVAL;
 
 		data = nla_data(info->attrs[NL80211_ATTR_REG_ALPHA2]);
-		return regulatory_hint_user(data, user_reg_hint_type);
+        err = regulatory_hint_user(data, user_reg_hint_type);
+        reg_set_channel_no_dfs(rd_disabled);
+        return err;
 	case NL80211_USER_REG_HINT_INDOOR:
 		if (info->attrs[NL80211_ATTR_SOCKET_OWNER]) {
 			owner_nlportid = genl_info_snd_portid(info);
Index: backports-4.19.7-1/net/wireless/reg.c
===================================================================
--- backports-4.19.7-1.orig/net/wireless/reg.c	2020-12-14 10:47:56.043272471 +0800
+++ backports-4.19.7-1/net/wireless/reg.c	2020-12-14 10:58:53.775300074 +0800
@@ -1502,7 +1502,7 @@
 	if (rd_flags & NL80211_RRF_NO_IR_ALL)
 		channel_flags |= IEEE80211_CHAN_NO_IR;
 	if (rd_flags & NL80211_RRF_DFS)
-		channel_flags |= IEEE80211_CHAN_RADAR;
+		channel_flags |= (IEEE80211_CHAN_RADAR | IEEE80211_CHAN_RADAR_BACKUP);
 	if (rd_flags & NL80211_RRF_NO_OFDM)
 		channel_flags |= IEEE80211_CHAN_NO_OFDM;
 	if (rd_flags & NL80211_RRF_NO_OUTDOOR)
