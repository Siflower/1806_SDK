Index: hostapd-2019-08-08-ca8c2bd2/hostapd/config_file.c
===================================================================
--- hostapd-2019-08-08-ca8c2bd2.orig/hostapd/config_file.c	2020-11-11 15:01:23.158748779 +0800
+++ hostapd-2019-08-08-ca8c2bd2/hostapd/config_file.c	2020-11-11 15:01:23.154748779 +0800
@@ -4202,6 +4202,12 @@
 		conf->disassociate_weak_sig_sta_enable = atoi(pos);
 	} else if (os_strcmp(buf, "weak_sta_signal") == 0) {
 		conf->weak_sta_signal = atoi(pos);
+	} else if (os_strcmp(buf, "sf_mm") == 0) {
+		conf->sf_mm= atoi(pos);
+		bss->sf_mm_wl = NULL;
+	} else if (os_strcmp(buf, "whitelist_config") == 0) {
+		int lenth = strlen(pos) > 16 ? 16 : strlen(pos);
+		memcpy(conf->whitelist_config, pos, lenth);
 #ifdef CONFIG_FST
 	} else if (os_strcmp(buf, "fst_group_id") == 0) {
 		size_t len = os_strlen(pos);
Index: hostapd-2019-08-08-ca8c2bd2/src/ap/ap_config.h
===================================================================
--- hostapd-2019-08-08-ca8c2bd2.orig/src/ap/ap_config.h	2020-11-11 15:01:23.158748779 +0800
+++ hostapd-2019-08-08-ca8c2bd2/src/ap/ap_config.h	2020-11-11 15:01:23.154748779 +0800
@@ -673,6 +673,7 @@
 
 	int vendor_vht;
 	int use_sta_nsts;
+	void *sf_mm_wl;
 
 	char *no_probe_resp_if_seen_on;
 	char *no_auth_if_seen_on;
@@ -988,6 +989,9 @@
 	int prohibit_weak_sig_sta_enable;
 	int disassociate_weak_sig_sta_enable;
 	int weak_sta_signal;
+	int sf_mm;
+	/* config file name */
+	char whitelist_config[16];
 
 	struct wpabuf *lci;
 	struct wpabuf *civic;
Index: hostapd-2019-08-08-ca8c2bd2/src/ap/beacon.c
===================================================================
--- hostapd-2019-08-08-ca8c2bd2.orig/src/ap/beacon.c	2020-11-11 15:01:23.158748779 +0800
+++ hostapd-2019-08-08-ca8c2bd2/src/ap/beacon.c	2020-11-11 15:01:23.154748779 +0800
@@ -841,6 +841,14 @@
 	}
 #endif /* CONFIG_P2P */
 
+	if (hapd->iconf->sf_mm) {
+		if (check_sta_whitelist(hapd->conf->sf_mm_wl, mgmt->sa))
+			goto unhidden;
+		else
+			goto check_hidden;
+	}
+
+check_hidden:
 	if (hapd->conf->ignore_broadcast_ssid && elems.ssid_len == 0 &&
 	    elems.ssid_list_len == 0) {
 		wpa_printf(MSG_MSGDUMP, "Probe Request from " MACSTR " for "
@@ -848,6 +856,7 @@
 		return;
 	}
 
+unhidden:
 #ifdef CONFIG_P2P
 	if ((hapd->conf->p2p & P2P_GROUP_OWNER) &&
 	    elems.ssid_len == P2P_WILDCARD_SSID_LEN &&
Index: hostapd-2019-08-08-ca8c2bd2/src/ap/ubus.c
===================================================================
--- hostapd-2019-08-08-ca8c2bd2.orig/src/ap/ubus.c	2020-11-11 15:01:23.158748779 +0800
+++ hostapd-2019-08-08-ca8c2bd2/src/ap/ubus.c	2020-11-11 15:02:26.850751452 +0800
@@ -21,6 +21,8 @@
 #include "rrm.h"
 #include "wnm_ap.h"
 #include "taxonomy.h"
+#include <libubox/avl.h>
+#include <uci.h>
 
 static struct ubus_context *ctx;
 static struct blob_buf b;
@@ -37,6 +39,8 @@
 	u8 addr[ETH_ALEN];
 };
 
+typedef struct ubus_banned_client sf_mm_whitelist;
+
 static void ubus_receive(int sock, void *eloop_ctx, void *sock_ctx)
 {
 	struct ubus_context *ctx = eloop_ctx;
@@ -948,6 +952,110 @@
 }
 #endif
 
+enum {
+	SF_MM_STA_MACADDR_LIST,
+	__SF_MM_STA_ATTR_MAX
+};
+
+static const struct blobmsg_policy sf_mm_policy[] = {
+	[SF_MM_STA_MACADDR_LIST] = { .name = "sta_macaddr_list", .type = BLOBMSG_TYPE_TABLE },
+};
+
+/*
+ * Return 1 if sta was found or 0 if not found
+ */
+int check_sta_whitelist(struct avl_tree *tree, const u8 *addr)
+{
+	if (!tree)
+		return 0;
+
+	return avl_find(tree, addr) == NULL ? 0 : 1;
+}
+
+int show_sta_whitelist(struct ubus_context *ctx, struct ubus_object *obj,
+			struct ubus_request_data *req, const char *method,
+			struct blob_attr *msg)
+{
+	struct hostapd_data *hapd = container_of(obj, struct hostapd_data, ubus.obj);
+	sf_mm_whitelist *sta;
+	void *list;
+	char mac_buf[20];
+
+	if (!hapd->iconf->sf_mm)
+		return UBUS_STATUS_METHOD_NOT_FOUND;
+
+	blob_buf_init(&b, 0);
+	list = blobmsg_open_table(&b, "clients");
+	avl_for_each_element((struct avl_tree *)hapd->conf->sf_mm_wl, sta, avl) {
+		sprintf(mac_buf, MACSTR, MAC2STR(sta->addr));
+		blobmsg_add_string(&b, "addr", mac_buf);
+	}
+	blobmsg_close_array(&b, list);
+	ubus_send_reply(ctx, req, b.head);
+
+	return 0;
+}
+
+int add_sta_whitelist(struct ubus_context *uctx, struct ubus_object *obj,
+		      struct ubus_request_data *req, const char *method,
+		      struct blob_attr *msg)
+{
+	struct hostapd_data *hapd = container_of(obj, struct hostapd_data, ubus.obj);
+	sf_mm_whitelist *sta;
+	struct blob_attr *tb[__SF_MM_STA_ATTR_MAX], *cur;
+	int rem;
+
+	if (!hapd->iconf->sf_mm)
+		return UBUS_STATUS_METHOD_NOT_FOUND;
+
+	blobmsg_parse(sf_mm_policy, __SF_MM_STA_ATTR_MAX, tb, blob_data(msg), blob_len(msg));
+
+	if (!tb[SF_MM_STA_MACADDR_LIST])
+		return UBUS_STATUS_INVALID_ARGUMENT;
+
+	blobmsg_for_each_attr(cur, tb[SF_MM_STA_MACADDR_LIST], rem) {
+		sta = os_zalloc(sizeof(*sta));
+		if (hwaddr_aton(blobmsg_get_string(cur), sta->addr)) {
+			free(sta);
+			return UBUS_STATUS_INVALID_ARGUMENT;
+		}
+		sta->avl.key = sta->addr;
+		avl_insert(hapd->conf->sf_mm_wl, &sta->avl);
+	}
+
+	return 0;
+}
+
+int del_sta_whitelist(struct ubus_context *uctx, struct ubus_object *obj,
+		      struct ubus_request_data *req, const char *method,
+		      struct blob_attr *msg)
+{
+	struct hostapd_data *hapd = container_of(obj, struct hostapd_data, ubus.obj);
+	sf_mm_whitelist *sta;
+	struct blob_attr *tb[__SF_MM_STA_ATTR_MAX], *cur;
+	u8 addr[ETH_ALEN];
+	int rem;
+
+	if (!hapd->iconf->sf_mm)
+		return UBUS_STATUS_METHOD_NOT_FOUND;
+
+	blobmsg_parse(sf_mm_policy, __SF_MM_STA_ATTR_MAX, tb, blob_data(msg), blob_len(msg));
+
+	if (!tb[SF_MM_STA_MACADDR_LIST])
+		return UBUS_STATUS_INVALID_ARGUMENT;
+
+	blobmsg_for_each_attr(cur, tb[SF_MM_STA_MACADDR_LIST], rem) {
+		hwaddr_aton(blobmsg_get_string(cur), addr);
+		sta = avl_find_element(hapd->conf->sf_mm_wl, addr, sta, avl);
+		if (!sta)
+			continue;
+		avl_delete(hapd->conf->sf_mm_wl, &sta->avl);
+		free(sta);
+	}
+
+	return 0;
+}
+
 static const struct ubus_method bss_methods[] = {
 	UBUS_METHOD_NOARG("get_clients", hostapd_bss_get_clients),
 	UBUS_METHOD("del_client", hostapd_bss_del_client, del_policy),
@@ -969,6 +1077,9 @@
 #ifdef CONFIG_WNM_AP
 	UBUS_METHOD("wnm_disassoc_imminent", hostapd_wnm_disassoc_imminent, wnm_disassoc_policy),
 #endif
+	UBUS_METHOD_NOARG("show_sta_whitelist", show_sta_whitelist),
+	UBUS_METHOD("add_sta_whitelist", add_sta_whitelist, sf_mm_policy),
+	UBUS_METHOD("del_sta_whitelist", del_sta_whitelist, sf_mm_policy),
 };
 
 static struct ubus_object_type bss_object_type =
@@ -979,6 +1090,66 @@
 	return memcmp(k1, k2, ETH_ALEN);
 }
 
+static int uci_hwaddr_parse(const char *txt, u8 *addr)
+{
+	size_t i;
+
+	for (i = 0; i < ETH_ALEN; i++) {
+		int a;
+
+		a = hex2byte(txt);
+		if (a < 0)
+			return -1;
+		txt += 2;
+		addr[i] = a;
+		if (i < ETH_ALEN - 1 && *txt++ != '_')
+			return -1;
+	}
+	return txt ? 0 : -1;
+}
+
+static int accept_sta_file(char *uci_config, struct avl_tree *tree)
+{
+	struct uci_context *ctx = uci_alloc_context();
+	struct uci_package *p = NULL;
+	struct uci_section *s;
+	struct uci_element *e1, *e2;
+	struct uci_option *o;
+	sf_mm_whitelist *sta;
+	int internet;
+	char buf[20];
+
+	uci_set_confdir(ctx, "/etc/config");
+
+	if (uci_load(ctx, uci_config, &p) == 0) {
+		uci_foreach_element(&p->sections, e1) {
+			memset(buf, 0, sizeof(buf));
+			internet = 0;
+			s = uci_to_section(e1);
+			uci_foreach_element(&s->options, e2) {
+				o = uci_to_option(e2);
+				if (strcmp(o->e.name, "mac") == 0)
+					strcpy(buf, o->v.string);
+				if (strcmp(o->e.name, "internet") == 0)
+					internet = atoi(o->v.string);
+			}
+			if (internet == 1) {
+				sta = os_zalloc(sizeof(*sta));
+				if (uci_hwaddr_parse(buf, sta->addr)) {
+					free(sta);
+					continue;
+				}
+				sta->avl.key = sta->addr;
+				avl_insert(tree, &sta->avl);
+			}
+		}
+		uci_unload(ctx,p);
+	}
+	uci_free_context(ctx);
+
+	return 0;
+}
+
 void hostapd_ubus_add_bss(struct hostapd_data *hapd)
 {
 	struct ubus_object *obj = &hapd->ubus.obj;
@@ -996,6 +1167,13 @@
 	if (asprintf(&name, "hostapd.%s", hapd->conf->iface) < 0)
 		return;
 
+	if (hapd->iconf->sf_mm) {
+		hapd->conf->sf_mm_wl = os_malloc(sizeof(struct avl_tree));
+		avl_init(hapd->conf->sf_mm_wl,  avl_compare_macaddr, false, NULL);
+		/* Read from config file */
+		accept_sta_file(hapd->iconf->whitelist_config, hapd->conf->sf_mm_wl);
+	}
+
 	avl_init(&hapd->ubus.banned, avl_compare_macaddr, false, NULL);
 	obj->name = name;
 	obj->type = &bss_object_type;
@@ -1009,6 +1187,7 @@
 {
 	struct ubus_object *obj = &hapd->ubus.obj;
 	char *name = (char *) obj->name;
+	sf_mm_whitelist *sta, *tmp;
 
 	if (!ctx)
 		return;
@@ -1018,6 +1197,13 @@
 		hostapd_ubus_ref_dec();
 	}
 
+	if (hapd->iconf->sf_mm && hapd->conf->sf_mm_wl) {
+		avl_remove_all_elements((struct avl_tree *)hapd->conf->sf_mm_wl, sta, avl, tmp)
+			free(sta);
+		free(hapd->conf->sf_mm_wl);
+		hapd->conf->sf_mm_wl = NULL;
+	}
+
 	free(name);
 }
 
@@ -1055,6 +1241,24 @@
 	if (ban)
 		return WLAN_STATUS_AP_UNABLE_TO_HANDLE_NEW_STA;
 
+	if (hapd->iconf->sf_mm) {
+		if (req->type == HOSTAPD_UBUS_ASSOC_REQ
+		    && !check_sta_whitelist(hapd->conf->sf_mm_wl, addr)) {
+			uint32_t sf_mm_ubus = 0;
+			if (!ubus_lookup_id(ctx, "sf_mm_ubus", &sf_mm_ubus))
+			{
+				blob_buf_init(&b, 0);
+				blobmsg_add_macaddr(&b, "address", addr);
+				if (req->mgmt_frame)
+					blobmsg_add_macaddr(&b, "target", req->mgmt_frame->da);
+				if (req->ssi_signal)
+					blobmsg_add_u32(&b, "signal", req->ssi_signal);
+				blobmsg_add_u32(&b, "freq", hapd->iface->freq);
+				ubus_invoke(ctx, sf_mm_ubus, "sta_connect", b.head, NULL, 0, 3000);
+			}
+		}
+	}
+
 	if (!hapd->ubus.obj.has_subscribers)
 		return WLAN_STATUS_SUCCESS;
 
