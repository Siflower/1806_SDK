Index: hostapd-2019-08-08-ca8c2bd2/hostapd/config_file.c
===================================================================
--- hostapd-2019-08-08-ca8c2bd2.orig/hostapd/config_file.c	2020-11-11 11:24:04.710201608 +0800
+++ hostapd-2019-08-08-ca8c2bd2/hostapd/config_file.c	2020-11-11 11:24:04.706201608 +0800
@@ -4192,6 +4192,14 @@
 	} else if (os_strcmp(buf, "wowlan_triggers") == 0) {
 		os_free(bss->wowlan_triggers);
 		bss->wowlan_triggers = os_strdup(pos);
+	} else if (os_strcmp(buf, "prohibit_weak_sig_sta_enable") == 0) {
+		conf->prohibit_weak_sig_sta_enable = atoi(pos);
+	} else if (os_strcmp(buf, "sta_min_dbm") == 0) {
+		conf->sta_min_dbm = atoi(pos);
+	} else if (os_strcmp(buf, "disassociate_weak_sig_sta_enable") == 0) {
+		conf->disassociate_weak_sig_sta_enable = atoi(pos);
+	} else if (os_strcmp(buf, "weak_sta_signal") == 0) {
+		conf->weak_sta_signal = atoi(pos);
 #ifdef CONFIG_FST
 	} else if (os_strcmp(buf, "fst_group_id") == 0) {
 		size_t len = os_strlen(pos);
Index: hostapd-2019-08-08-ca8c2bd2/src/ap/ap_config.c
===================================================================
--- hostapd-2019-08-08-ca8c2bd2.orig/src/ap/ap_config.c	2020-11-11 11:24:04.710201608 +0800
+++ hostapd-2019-08-08-ca8c2bd2/src/ap/ap_config.c	2020-11-11 11:24:04.706201608 +0800
@@ -256,6 +256,11 @@
 	 * environments for the current frequency band in the country. */
 	conf->country[2] = ' ';
 
+	conf->sta_min_dbm = -75;
+	conf->prohibit_weak_sig_sta_enable = 0;
+	conf->disassociate_weak_sig_sta_enable = 0;
+	conf->weak_sta_signal = -75;
+
 	conf->rssi_reject_assoc_rssi = 0;
 	conf->rssi_reject_assoc_timeout = 30;
 
Index: hostapd-2019-08-08-ca8c2bd2/src/ap/ap_config.h
===================================================================
--- hostapd-2019-08-08-ca8c2bd2.orig/src/ap/ap_config.h	2020-11-11 11:24:04.710201608 +0800
+++ hostapd-2019-08-08-ca8c2bd2/src/ap/ap_config.h	2020-11-11 11:24:04.706201608 +0800
@@ -978,6 +978,11 @@
 	unsigned int num_acs_chan_bias;
 #endif /* CONFIG_ACS */
 
+	int sta_min_dbm;
+	int prohibit_weak_sig_sta_enable;
+	int disassociate_weak_sig_sta_enable;
+	int weak_sta_signal;
+
 	struct wpabuf *lci;
 	struct wpabuf *civic;
 	int stationary_ap;
Index: hostapd-2019-08-08-ca8c2bd2/src/ap/ieee802_11.c
===================================================================
--- hostapd-2019-08-08-ca8c2bd2.orig/src/ap/ieee802_11.c	2020-11-11 11:24:04.710201608 +0800
+++ hostapd-2019-08-08-ca8c2bd2/src/ap/ieee802_11.c	2020-11-11 11:24:04.706201608 +0800
@@ -3889,6 +3889,10 @@
 		.ssi_signal = rssi,
 	};
 
+	if(hapd->iconf->prohibit_weak_sig_sta_enable)
+		if(rssi< hapd->iconf->sta_min_dbm)
+			return;
+
 	if (len < IEEE80211_HDRLEN + (reassoc ? sizeof(mgmt->u.reassoc_req) :
 				      sizeof(mgmt->u.assoc_req))) {
 		wpa_printf(MSG_INFO, "handle_assoc(reassoc=%d) - too short payload (len=%lu)",
Index: hostapd-2019-08-08-ca8c2bd2/src/ap/sta_info.c
===================================================================
--- hostapd-2019-08-08-ca8c2bd2.orig/src/ap/sta_info.c	2020-11-11 11:24:04.710201608 +0800
+++ hostapd-2019-08-08-ca8c2bd2/src/ap/sta_info.c	2020-11-11 11:25:48.778205976 +0800
@@ -263,6 +263,8 @@
 
 	wpa_printf(MSG_DEBUG, "%s: cancel ap_handle_timer for " MACSTR,
 		   __func__, MAC2STR(sta->addr));
+	if(hapd->iconf->disassociate_weak_sig_sta_enable)
+		eloop_cancel_timeout(ap_sta_sig_handle_timer, hapd, sta);
 	eloop_cancel_timeout(ap_handle_timer, hapd, sta);
 	eloop_cancel_timeout(ap_handle_session_timer, hapd, sta);
 	eloop_cancel_timeout(ap_handle_session_warning_timer, hapd, sta);
@@ -402,6 +404,43 @@
 
 
 /**
+ * ap_sta_sig_handle_timer - Per STA timer handler
+ * @eloop_ctx: struct hostapd_data *
+ * @timeout_ctx: struct sta_info *
+ *
+ * This function is called to check station signal and to remove
+ * stations whose signal is too weak.
+ */
+void ap_sta_sig_handle_timer(void *eloop_ctx, void *timeout_ctx)
+{
+	struct hostap_sta_driver_data data;
+	struct hostapd_data *hapd = eloop_ctx;
+	struct sta_info *sta = timeout_ctx;
+
+	//get signal
+	if (hostapd_drv_read_sta_data(hapd, &data, sta->addr) < 0)
+		return;
+	//if signal is too weak,deauth sta
+	if (data.signal < hapd->iconf->weak_sta_signal)
+	{
+		sta->too_weak_count ++;
+		if(sta->too_weak_count > 5)
+		{
+			ap_sta_deauthenticate(hapd,sta,WLAN_REASON_UNSPECIFIED);
+			return;
+		}
+		//if have a too weak signal,then get signal every 5 seconds
+		eloop_register_timeout(2, 0, ap_sta_sig_handle_timer, hapd, sta);
+	}
+	else
+	{
+		//if have a signal that is good,then set too_weak_count to 0
+		sta->too_weak_count = 0;
+		eloop_register_timeout(5, 0, ap_sta_sig_handle_timer, hapd, sta);
+	}
+}
+
+/**
  * ap_handle_timer - Per STA timer handler
  * @eloop_ctx: struct hostapd_data *
  * @timeout_ctx: struct sta_info *
@@ -714,6 +753,9 @@
 			   hapd->conf->ap_max_inactivity);
 		eloop_register_timeout(hapd->conf->ap_max_inactivity, 0,
 				       ap_handle_timer, hapd, sta);
+		//check sta signal every ap_max_inactivity seconds
+		if(hapd->iconf->disassociate_weak_sig_sta_enable)
+			eloop_register_timeout(5, 0, ap_sta_sig_handle_timer, hapd, sta);
 	}
 
 	/* initialize STA info data */
Index: hostapd-2019-08-08-ca8c2bd2/src/ap/sta_info.h
===================================================================
--- hostapd-2019-08-08-ca8c2bd2.orig/src/ap/sta_info.h	2020-11-11 11:24:04.710201608 +0800
+++ hostapd-2019-08-08-ca8c2bd2/src/ap/sta_info.h	2020-11-11 11:24:04.706201608 +0800
@@ -217,6 +217,7 @@
 	u16 last_seq_ctrl;
 	/* Last Authentication/(Re)Association Request/Action frame subtype */
 	u8 last_subtype;
+	u8 too_weak_count;
 
 #ifdef CONFIG_MBO
 	u8 cell_capa; /* 0 = unknown (not an MBO STA); otherwise,
@@ -313,6 +314,7 @@
 void ap_sta_ip6addr_del(struct hostapd_data *hapd, struct sta_info *sta);
 void hostapd_free_stas(struct hostapd_data *hapd);
 void ap_handle_timer(void *eloop_ctx, void *timeout_ctx);
+void ap_sta_sig_handle_timer(void *eloop_ctx, void *timeout_ctx);
 void ap_sta_replenish_timeout(struct hostapd_data *hapd, struct sta_info *sta,
 			      u32 session_timeout);
 void ap_sta_session_timeout(struct hostapd_data *hapd, struct sta_info *sta,
