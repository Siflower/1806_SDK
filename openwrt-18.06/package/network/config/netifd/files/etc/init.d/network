#!/bin/sh /etc/rc.common

START=20
STOP=90

USE_PROCD=1

init_switch() {
	setup_switch() { return 0; }

	include /lib/network
	setup_switch
}

check_switch_port_valid() {
	local switch_type=$1
	local cpu_port=$2

	if [ -n "$switch_type" -a -n "$cpu_port" ]; then
		if [ "$switch_type" -eq "1" -a "$cpu_port" -eq "16" ];then
			return 1; # realtek switch
		fi

		if [ "$switch_type" -eq "2" -a "$cpu_port" -eq "5" ];then
			return 1; # intel switch
		fi

		if [ "$switch_type" -eq "3" -a "$cpu_port" -eq "5" ];then
			return 1; # intel gsw141 switch
		fi

		if [ "$switch_type" -eq "4" -a "$cpu_port" -eq "17" ];then
			return 1; # nf2507 switch
		fi

		if [ "$switch_type" -eq "5" -a "$cpu_port" -eq "5" ];then
			return 1; # yt9215rb switch
		fi
	fi

	return 0;
}

start_service() {
	./usr/bin/hnat_update_interface.sh
	local lanip=$(uci get network.lan.ipaddr)
	local switch_type=$(cat sys/kernel/debug/esw_debug |grep switch_type | cut -d ' ' -f2)
	local cpu_port=$(uci get network.@switch_vlan[0].ports | cut -d 't' -f 1 | awk -F ' ' '{print $NF}')
	echo ${lanip} siwifi.cn > /etc/hosts

	check_switch_port_valid $switch_type $cpu_port
	if [ $? -eq 1 ]; then
		init_switch
	fi

	procd_open_instance
	procd_set_param command /sbin/netifd
	procd_set_param respawn
	procd_set_param watch network.interface
	[ -e /proc/sys/kernel/core_pattern ] && {
		procd_set_param limits core="unlimited"
	}
	procd_close_instance
}

reload_service() {
	./usr/bin/hnat_update_interface.sh
	local rv=0

	init_switch
	ubus call network reload || rv=1
	/sbin/wifi reload_legacy
	return $rv
}

stop_service() {
	/sbin/wifi down
	ifdown -a
	sleep 1
	# service_stop /sbin/netifd
	# procd_kill network ''
}

restart() {
	trap '' TERM
	stop "$@"
	start "$@"
}

service_running() {
	ubus -t 30 wait_for network.interface
	/sbin/wifi reload_legacy
}

validate_atm_bridge_section()
{
	uci_validate_section network "atm-bridge" "${1}" \
		'unit:uinteger:0' \
		'vci:range(32, 65535):35' \
		'vpi:range(0, 255):8' \
		'atmdev:uinteger:0' \
		'encaps:or("llc", "vc"):llc' \
		'payload:or("bridged", "routed"):bridged'
}

validate_route_section()
{
	uci_validate_section network route "${1}" \
		'interface:string' \
		'target:cidr4' \
		'netmask:netmask4' \
		'gateway:ip4addr' \
		'metric:uinteger' \
		'mtu:uinteger' \
		'table:or(range(0,65535),string)'
}

validate_route6_section()
{
	uci_validate_section network route6 "${1}" \
		'interface:string' \
		'target:cidr6' \
		'gateway:ip6addr' \
		'metric:uinteger' \
		'mtu:uinteger' \
		'table:or(range(0,65535),string)'
}

validate_rule_section()
{
	uci_validate_section network rule "${1}" \
		'in:string' \
		'out:string' \
		'src:cidr4' \
		'dest:cidr4' \
		'tos:range(0,31)' \
		'mark:string' \
		'invert:bool' \
		'lookup:or(range(0,65535),string)' \
		'goto:range(0,65535)' \
		'action:or("prohibit", "unreachable", "blackhole", "throw")'
}

validate_rule6_section()
{
	uci_validate_section network rule6 "${1}" \
		'in:string' \
		'out:string' \
		'src:cidr6' \
		'dest:cidr6' \
		'tos:range(0,31)' \
		'mark:string' \
		'invert:bool' \
		'lookup:or(range(0,65535),string)' \
		'goto:range(0,65535)' \
		'action:or("prohibit", "unreachable", "blackhole", "throw")'
}

validate_switch_section()
{
	uci_validate_section network switch "${1}" \
		'name:string' \
		'enable:bool' \
		'enable_vlan:bool' \
		'reset:bool'
}

validate_switch_vlan()
{
	uci_validate_section network switch_vlan "${1}" \
		'device:string' \
		'vlan:uinteger' \
		'ports:list(ports)'
}

service_triggers()
{
	procd_add_reload_trigger network wireless

	procd_open_validate
	validate_atm_bridge_section
	validate_route_section
	[ -e /proc/sys/net/ipv6 ] && validate_route6_section
	validate_rule_section
	[ -e /proc/sys/net/ipv6 ] && validate_rule6_section
	validate_switch_section
	validate_switch_vlan
	procd_close_validate
}

shutdown() {
	ifdown -a
	sleep 1
}
